Gabriel Rodriguez


Parse* methods: 
I added them to the WorldModel class because all of these methods are actually creating or parsing the “world” that we see. For example in parseBackground, we are setting the Background and instantiating it in a sense. This is also done in the other parse methods that I also added to the WorldModel. I also added these methods to this class because the processLine that I added to WorldModel calls these parse methods based on the key, which added evidence as to why I should be adding the parse methods to the WorldModel class. I was confused on whether to add these to ImageStore or just leave them in functions but this latter piece of evidence caused me to put them in WorldModel as a result. 


findNearest: 
I put this one in WorldModel because in the second for statement, we call the world data in a for each loop, telling me that we are accessing world’s data more than any other repeatedly, so I put it in WorldModel. 


load: 
We are loading the world and using either Scanner, ImageStore, or World. And since we are loading the world and not just a few pieces I choose to put this method in WorldModel. 


processline : 
Similar thinking to load, I have to choose between the 3 different parameters and their classes, and WorldModel encapsulates the entire world so I choose that due to hierarchy essentially.